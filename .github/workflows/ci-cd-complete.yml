---
name: CI/CD - Test and Publish

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint yamllint

      - name: Run yamllint
        run: yamllint .

      - name: Run ansible-lint
        run: ansible-lint .

  test:
    name: Molecule Testing
    runs-on: ubuntu-22.04
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        scenario: [ubuntu, debian, rocky]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install Galaxy dependencies (CI-specific)
        run: |
          # Método 1: Instalar en directorio roles/
          mkdir -p roles
          ansible-galaxy install -r requirements.yml -p roles/ --force
          
          # Método 2: Instalar en ubicación default también
          ansible-galaxy install -r requirements.yml --force
          
          # Verificar instalación
          ansible-galaxy role list

      - name: Configure Ansible for CI
        run: |
          # Crear ansible.cfg específico para CI
          cat > ansible.cfg << 'ANSIBLE_CFG'
          [defaults]
          roles_path = ./roles:./:.ansible-deps:~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles
          host_key_checking = False
          stdout_callback = yaml
          callbacks_enabled = profile_tasks, timer
          
          [inventory]
          enable_plugins = host_list, script, auto, yaml, ini, toml
          
          [ssh_connection]
          pipelining = True
          ANSIBLE_CFG

      - name: Run Molecule tests
        run: molecule test -s ${{ matrix.scenario }}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'

  integration-test:
    name: Full Integration Test
    runs-on: ubuntu-22.04
    needs: [lint, test]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Install Galaxy dependencies
        run: |
          mkdir -p roles
          ansible-galaxy install -r requirements.yml -p roles/ --force
          ansible-galaxy install -r requirements.yml --force

      - name: Configure Ansible for integration
        run: |
          cat > ansible.cfg << 'ANSIBLE_CFG'
          [defaults]
          roles_path = ./roles:./:.ansible-deps:~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles
          host_key_checking = False
          stdout_callback = yaml
          callbacks_enabled = profile_tasks, timer
          ANSIBLE_CFG

      - name: Run Multi-Distro Integration Test
        run: |
          molecule test -s default
          echo "🎉 Multi-distro testing completed!"
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'

  publish-galaxy:
    name: Publish to Ansible Galaxy
    runs-on: ubuntu-22.04
    needs: [lint, test, integration-test]
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core

      - name: Publish to Galaxy
        run: |
          ansible-galaxy role import \
            --api-key ${{ secrets.GALAXY_API_KEY }} \
            ${{ github.repository_owner }} \
            ${{ github.event.repository.name }}
        env:
          GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}

      - name: Success Notification
        run: |
          echo "🎉 Role published successfully to Ansible Galaxy!"
          echo "📦 Namespace: ${{ github.repository_owner }}"
          echo "🏷️  Role: wordpress_webserver"
          echo "🔗 Galaxy URL: https://galaxy.ansible.com/ui/standalone/roles/${{ github.repository_owner }}/wordpress_webserver/"
          echo "📥 Install with: ansible-galaxy role install ${{ github.repository_owner }}.wordpress_webserver"

---
# Instalación y configuración de WordPress

- name: "Verificar si WordPress ya está instalado"
  ansible.builtin.stat:
    path: "{{ wordpress_install_dir }}/wp-config.php"
  register: wordpress_installed
  tags: ["wordpress"]

- name: "Descargar WordPress"
  ansible.builtin.get_url:
    url: "{{ wordpress_download_url }}"
    dest: "{{ wordpress_temp_dir }}/wordpress-{{ wordpress_version }}.tar.gz"
    mode: "0644"
  when: not wordpress_installed.stat.exists
  tags: ["wordpress", "download"]

- name: "Extraer WordPress"
  ansible.builtin.unarchive:
    src: "{{ wordpress_temp_dir }}/wordpress-{{ wordpress_version }}.tar.gz"
    dest: "{{ wordpress_temp_dir }}"
    remote_src: true
    creates: "{{ wordpress_temp_dir }}/wordpress"
  when: not wordpress_installed.stat.exists
  tags: ["wordpress", "extract"]

- name: "Copiar archivos de WordPress"
  ansible.builtin.copy:
    src: "{{ wordpress_temp_dir }}/wordpress/"
    dest: "{{ wordpress_install_dir }}/"
    remote_src: true
    owner: "{{ wordpress_user }}"
    group: "{{ wordpress_group }}"
    mode: "0755"
  when: not wordpress_installed.stat.exists
  tags: ["wordpress", "copy"]

# ✅ NEW: Fix permissions properly after copy
- name: "Establecer permisos correctos para archivos WordPress"
  ansible.builtin.file:
    path: "{{ wordpress_install_dir }}"
    owner: "{{ wordpress_user }}"
    group: "{{ wordpress_group }}"
    mode: "0755"
    recurse: true
  when: not wordpress_installed.stat.exists
  tags: ["wordpress", "permissions"]

- name: "Establecer permisos específicos para archivos PHP"
  ansible.builtin.shell: |
    find {{ wordpress_install_dir }} -type f -name "*.php" -exec chmod 644 {} \;
    find {{ wordpress_install_dir }} -type d -exec chmod 755 {} \;
  when: not wordpress_installed.stat.exists
  changed_when: true
  tags: ["wordpress", "permissions"]

- name: "Establecer permisos especiales para wp-content"
  ansible.builtin.file:
    path: "{{ wordpress_install_dir }}/wp-content"
    mode: "0775"
    recurse: true
  tags: ["wordpress", "permissions"]

- name: "Crear wp-config.php desde template"
  ansible.builtin.template:
    src: wp-config.php.j2
    dest: "{{ wordpress_install_dir }}/wp-config.php"
    owner: "{{ wordpress_user }}"
    group: "{{ wordpress_group }}"
    mode: "0644"
    backup: true
  tags: ["wordpress", "config"]

- name: "Configurar Apache para WordPress (Debian/Ubuntu)"
  when:
    - webserver_type == "apache"
    - ansible_os_family == "Debian"
  tags: ["apache", "vhost"]
  block:
    - name: "Crear virtualhost de Apache"
      ansible.builtin.template:
        src: apache-wordpress.conf.j2
        dest: /etc/apache2/sites-available/wordpress.conf
        backup: true
      notify: restart apache2

    # ✅ FIX: Usar módulo apache2_module para idempotencia
    - name: "Verificar si sitio WordPress está habilitado"
      ansible.builtin.stat:
        path: /etc/apache2/sites-enabled/wordpress.conf
      register: wordpress_site_enabled

    - name: "Habilitar sitio de WordPress"
      ansible.builtin.command: a2ensite wordpress.conf
      when: not wordpress_site_enabled.stat.exists
      changed_when: not wordpress_site_enabled.stat.exists
      when: not wordpress_site_enabled.stat.exists
      changed_when: not wordpress_site_enabled.stat.exists
      notify: restart apache2

    - name: "Verificar si sitio por defecto está habilitado"
      ansible.builtin.stat:
        path: /etc/apache2/sites-enabled/000-default.conf
      register: default_site_enabled

    - name: "Deshabilitar sitio por defecto"
      ansible.builtin.command: a2dissite 000-default.conf
      when: default_site_enabled.stat.exists
      changed_when: default_site_enabled.stat.exists
      failed_when: false
      when: default_site_enabled.stat.exists
      changed_when: default_site_enabled.stat.exists
      notify: restart apache2
      failed_when: false

- name: "Configurar Apache para WordPress (RedHat/Rocky)"
  ansible.builtin.template:
    src: apache-wordpress.conf.j2
    dest: /etc/httpd/conf.d/wordpress.conf
    backup: true
  when:
    - webserver_type == "apache"
    - ansible_os_family == "RedHat"
  notify: restart httpd
  tags: ["apache", "vhost"]

- name: "Limpiar archivos temporales"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ wordpress_temp_dir }}/wordpress-{{ wordpress_version }}.tar.gz"
    - "{{ wordpress_temp_dir }}/wordpress"
  tags: ["wordpress", "cleanup"]
